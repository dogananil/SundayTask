//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""c62abf9d-d183-4e2f-9a59-433a4236e7ed"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""3813d5c8-7a8c-473f-993b-aa6bc2f9847b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchStart"",
                    ""type"": ""Button"",
                    ""id"": ""cd6eb0b8-541e-4067-98bd-618db9c876cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""04421f29-af53-4bb3-98d6-ad0ffade1486"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97211048-4bfa-4438-b44e-2fa56f98987f"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""b32801fb-82ca-456c-bbbf-9979fe3f9a40"",
            ""actions"": [
                {
                    ""name"": ""PressToContinue"",
                    ""type"": ""Button"",
                    ""id"": ""682d507b-a3d0-4358-800d-3a78d5449a3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PressToTryAgain"",
                    ""type"": ""Button"",
                    ""id"": ""93306f90-803b-4bde-9714-0fa7d9870039"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8523b7fa-e843-4ddc-b456-560e0cd5e43a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressToContinue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53b64bc9-8b09-426e-b52c-2ae813fa8100"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressToTryAgain"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_TouchPosition = m_Player.FindAction("TouchPosition", throwIfNotFound: true);
        m_Player_TouchStart = m_Player.FindAction("TouchStart", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_PressToContinue = m_UI.FindAction("PressToContinue", throwIfNotFound: true);
        m_UI_PressToTryAgain = m_UI.FindAction("PressToTryAgain", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_TouchPosition;
    private readonly InputAction m_Player_TouchStart;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPosition => m_Wrapper.m_Player_TouchPosition;
        public InputAction @TouchStart => m_Wrapper.m_Player_TouchStart;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @TouchPosition.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTouchPosition;
                @TouchStart.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTouchStart;
                @TouchStart.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTouchStart;
                @TouchStart.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTouchStart;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @TouchStart.started += instance.OnTouchStart;
                @TouchStart.performed += instance.OnTouchStart;
                @TouchStart.canceled += instance.OnTouchStart;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_PressToContinue;
    private readonly InputAction m_UI_PressToTryAgain;
    public struct UIActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PressToContinue => m_Wrapper.m_UI_PressToContinue;
        public InputAction @PressToTryAgain => m_Wrapper.m_UI_PressToTryAgain;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @PressToContinue.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPressToContinue;
                @PressToContinue.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPressToContinue;
                @PressToContinue.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPressToContinue;
                @PressToTryAgain.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPressToTryAgain;
                @PressToTryAgain.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPressToTryAgain;
                @PressToTryAgain.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPressToTryAgain;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PressToContinue.started += instance.OnPressToContinue;
                @PressToContinue.performed += instance.OnPressToContinue;
                @PressToContinue.canceled += instance.OnPressToContinue;
                @PressToTryAgain.started += instance.OnPressToTryAgain;
                @PressToTryAgain.performed += instance.OnPressToTryAgain;
                @PressToTryAgain.canceled += instance.OnPressToTryAgain;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IPlayerActions
    {
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouchStart(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnPressToContinue(InputAction.CallbackContext context);
        void OnPressToTryAgain(InputAction.CallbackContext context);
    }
}
